<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Holtzscher</title>
    <link>https://mholtzscher.github.io/</link>
    <description>Recent content on Michael Holtzscher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Michael Holtzscher</copyright>
    <lastBuildDate>Wed, 07 Mar 2018 20:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://mholtzscher.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Is The Most Popular GitHub License?</title>
      <link>https://mholtzscher.github.io/2018/03/07/github_licenses/</link>
      <pubDate>Wed, 07 Mar 2018 20:00:00 -0500</pubDate>
      
      <guid>https://mholtzscher.github.io/2018/03/07/github_licenses/</guid>
      <description>The data for this project is taken from Google&amp;rsquo;s public BigQuery datasets. The dataset can be easily accessed on Kaggle via the GitHub Repos dataset.
Getting The Data import pandas as pd from google.cloud import bigquery from bq_helper import BigQueryHelper  bq = BigQueryHelper(&#39;bigquery-public-data&#39;, &#39;github_repos&#39;)  QUERY = &amp;quot;&amp;quot;&amp;quot; SELECT license, COUNT(license) as license_count FROM `bigquery-public-data.github_repos.licenses` GROUP BY license &amp;quot;&amp;quot;&amp;quot; df = bq.query_to_pandas_safe(QUERY)  ax = df.sort_values(&#39;license_count&#39;).plot.barh(x=&#39;license&#39;, y=&#39;license_count&#39;, legend=False) ax.</description>
    </item>
    
    <item>
      <title>2016 US Presedential Election Contributions - Donations (Part 3)</title>
      <link>https://mholtzscher.github.io/2017/08/07/2016_presidential_contributions_bins/</link>
      <pubDate>Mon, 07 Aug 2017 15:00:00 -0500</pubDate>
      
      <guid>https://mholtzscher.github.io/2017/08/07/2016_presidential_contributions_bins/</guid>
      <description>In this post I wanted to look at the distribution of donation sizes. I was curious if one of the candidates was better at getting small donations versus large contributions from organizations.
Data is from the FEC
import pandas as pd import plotly.plotly as py import cufflinks as cf  cf.set_config_file(theme=&#39;polar&#39;) cf.go_online()  Preparing The Data df = pd.read_csv(&amp;quot;P00000001-ALL.csv&amp;quot;, index_col=False)  Filtering Out Refunds df = df[df.contb_receipt_amt &amp;gt; 0]  Create A DataFrame Filtered To The Final Major Candidates df = df[df.</description>
    </item>
    
    <item>
      <title>2016 US Presedential Election Contributions - Maps (Part 2)</title>
      <link>https://mholtzscher.github.io/2017/07/26/2016_presidential_contributions_map/</link>
      <pubDate>Wed, 26 Jul 2017 15:00:00 -0500</pubDate>
      
      <guid>https://mholtzscher.github.io/2017/07/26/2016_presidential_contributions_map/</guid>
      <description>Continuing from my last post, I wanted to see how the distribution of donations looked across the US states.
Data is from the FEC
import pandas as pd import plotly.plotly as py import plotly.offline as offline import cufflinks as cf  Preparing The Data url = &#39;contributors.csv&#39; df = pd.read_csv(url, index_col=False)  Matching Candidates To Their Parties parties = {&#39;Rubio, Marco&#39;: &#39;Republican&#39;, &#39;Santorum, Richard J.&#39;: &#39;Republican&#39;, &#39;Perry, James R. (Rick)&#39;: &#39;Republican&#39;, &#39;Carson, Benjamin S.</description>
    </item>
    
    <item>
      <title>2016 US Presedential Election Contributions (Part 1)</title>
      <link>https://mholtzscher.github.io/2017/07/21/2016_presidential_contributions/</link>
      <pubDate>Fri, 21 Jul 2017 08:00:00 -0500</pubDate>
      
      <guid>https://mholtzscher.github.io/2017/07/21/2016_presidential_contributions/</guid>
      <description>I recently came across this dataset from the Federal Election Commission and wanted to explore it a bit to see how money affected the election. Each plot aims to try and answer a question that I thought of while looking through the available data. This post is part 1 of my exploration and visualization of this dataset.
Data is from the FEC
import pandas as pd import numpy as np import plotly.</description>
    </item>
    
    <item>
      <title>US National Baby Names</title>
      <link>https://mholtzscher.github.io/2017/07/16/national/</link>
      <pubDate>Sun, 16 Jul 2017 15:00:00 -0500</pubDate>
      
      <guid>https://mholtzscher.github.io/2017/07/16/national/</guid>
      <description>The data for this project is taken from Kaggle US Baby Names dataset. It consists of Social Security Administration baby naming data from 1880 to 2014. Note that only names with at least 5 babies born in the same year (/ state) are included in this dataset for privacy.
Preparing The Data import pandas as pd import numpy as np import matplotlib.pyplot as plt %matplotlib inline font_size = 16  df = pd.</description>
    </item>
    
    <item>
      <title>Chicago Homicide Data</title>
      <link>https://mholtzscher.github.io/2017/07/10/chicago_homicides/</link>
      <pubDate>Mon, 10 Jul 2017 15:15:29 -0500</pubDate>
      
      <guid>https://mholtzscher.github.io/2017/07/10/chicago_homicides/</guid>
      <description>I have started learning Python and Pandas recently and was looking for a good dataset to play with to get my feet wet. I chose the Chicago crime data because it is large, structured, and mostly complete. The fact that little data is missing makes this a great way to get started exploring. The size also presents some fun challenges since it takes a decent amount of RAM(and patience) to load the ~63 million rows.</description>
    </item>
    
    <item>
      <title>Test Post Please Ignore</title>
      <link>https://mholtzscher.github.io/2017/07/10/good-to-great/</link>
      <pubDate>Mon, 10 Jul 2017 15:15:29 -0500</pubDate>
      
      <guid>https://mholtzscher.github.io/2017/07/10/good-to-great/</guid>
      <description>This is my first post here and I hope to publish often! Check back later!</description>
    </item>
    
  </channel>
</rss>